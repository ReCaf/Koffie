library(ISLR)
library(e1071)
library(ROCR)
attach(OJ)
#create a 800 training observations and a remaining test set
dim(OJ)
set.seed(1)
train=sample(seq_len(nrow(OJ)),size = 800)
train.oj = OJ[train,]
test.oj = OJ[-train,]
#b support vector classifier cost=0.01 purchase is response var 
svm.fit=svm(Purchase~., data = OJ[train,], kernel="linear",cost=0.01 )
summary(svm.fit)
plot(svm.fit,OJ)
#training and test errors
train.predict=predict(svm.fit,train.oj)
train.table=table(predict=train.predict,trith=train.oj$Purchase)
trainingerror1 = (train.table[2,1]+train.table[1,2])/(train.table[1,1]+train.table[2,2])
test.predict=predict(svm.fit,test.oj)
test.table=table(predict=test.predict,trith=test.oj$Purchase)
testerror1= (test.table[2,1]+test.table[1,2])/(test.table[1,1]+test.table[2,2])
#use tune on a range from 0.01 to 10
tune.out=tune(svm,Purchase~., data=train.oj, kernel= "linear",ranges=list(cost=c(0.01,0.1,0.5,1,2,5,10)))
summary(tune.out)
bestmod=tune.out$best.model
#training error and test error
train.predict=predict(bestmod,train.oj)
train.table=table(predict=train.predict,trith=train.oj$Purchase)
trainingerror2 = (train.table[2,1]+train.table[1,2])/(train.table[1,1]+train.table[2,2])
test.predict=predict(bestmod,test.oj)
test.table=table(predict=test.predict,trith=test.oj$Purchase)
testerror2= (test.table[2,1]+test.table[1,2])/(test.table[1,1]+test.table[2,2])
#tune with radial kerne;
tune.out2=tune(svm,Purchase~., data=train.oj, kernel= "radial",ranges=list(cost=c(0.01,0.1,0.5,1,2,5,10)))
summary(tune.out2)
bestmod2=tune.out2$best.model
train.predict=predict(bestmod2,train.oj)
train.table=table(predict=train.predict,trith=train.oj$Purchase)
trainingerror3 = (train.table[2,1]+train.table[1,2])/(train.table[1,1]+train.table[2,2])
test.predict=predict(bestmod2,test.oj)
test.table=table(predict=test.predict,trith=test.oj$Purchase)
testerror3= (test.table[2,1]+test.table[1,2])/(test.table[1,1]+test.table[2,2])
#tune with polynomial kernel
tune.out3=tune(svm,Purchase~., data=train.oj, kernel= "polynomial", degree=2 ,ranges=list(cost=c(0.01,0.1,0.5,1,2,5,10)))
summary(tune.out3)
bestmod3=tune.out2$best.model
train.predict=predict(bestmod2,train.oj)
train.table=table(predict=train.predict,trith=train.oj$Purchase)
trainingerror4 = (train.table[2,1]+train.table[1,2])/(train.table[1,1]+train.table[2,2])
test.predict=predict(bestmod2,test.oj)
test.table=table(predict=test.predict,trith=test.oj$Purchase)
testerror4= (test.table[2,1]+test.table[1,2])/(test.table[1,1]+test.table[2,2])
#best
rocplot =function (pred , truth , ...){
  predob = prediction (pred , truth )
  perf = performance (predob , "tpr ", "fpr ")
  plot(perf ,...)}
rocplot(train.predict,OJ[train,"Purchase"])
